const nodemailer = require("nodemailer");
require("dotenv").config();
const OrderItem = require("../models/orderItem");
const VariantImage = require("../models/variantImage");
const Order = require("../models/order");

// Kh·ªüi t·∫°o transporter v·ªõi Gmail
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: process.env.EMAIL,
    pass: process.env.PASSWORD,
  },
});

// G·ª≠i email ch·ª©a m√£ OTP
const sendCreateAccount = async (to, otp) => {
  const mailOptions = {
    from: `"H·ªá th·ªëng h·ªó tr·ª£" <${process.env.EMAIL}>`,
    to,
    subject: "T·∫°o t√†i kho·∫£n - M√£ OTP",
    html: `
            <div style="font-family: Arial, sans-serif; font-size: 16px; color: #333;">
                <h2>T·∫°o t√†i kho·∫£n</h2>
                <p>B·∫°n v·ª´a y√™u c·∫ßu t·∫°o t√†i kho·∫£n m·ªõi.</p>
                <p><strong>M√£ OTP c·ªßa b·∫°n l√†:</strong></p>
                <div style="font-size: 24px; font-weight: bold; color: #2d8cf0;">${otp}</div>
                <p>M√£ OTP n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.</p>
                <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y.</p>
                <br/>
                <p>Tr√¢n tr·ªçng,</p>
                <p>ƒê·ªôi ng≈© h·ªó tr·ª£</p>
            </div>
        `,
  };

  await transporter.sendMail(mailOptions);
};

const sendRecoveryPassword = async (to, otp) => {
  const mailOptions = {
    from: `"H·ªá th·ªëng h·ªó tr·ª£" <${process.env.EMAIL}>`,
    to,
    subject: "Kh√¥i ph·ª•c m·∫≠t kh·∫©u - M√£ OTP",
    html: `
            <div style="font-family: Arial, sans-serif; font-size: 16px; color: #333;">
                <h2>Kh√¥i ph·ª•c m·∫≠t kh·∫©u</h2>
                <p>B·∫°n v·ª´a y√™u c·∫ßu kh√¥i ph·ª•c m·∫≠t kh·∫©u cho t√†i kho·∫£n.</p>
                <p><strong>M√£ OTP c·ªßa b·∫°n l√†:</strong></p>
                <div style="font-size: 24px; font-weight: bold; color: #2d8cf0;">${otp}</div>
                <p>M√£ OTP n√†y c√≥ hi·ªáu l·ª±c trong 5 ph√∫t.</p>
                <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu, vui l√≤ng b·ªè qua email n√†y.</p>
                <br/>
                <p>Tr√¢n tr·ªçng,</p>
                <p>ƒê·ªôi ng≈© h·ªó tr·ª£</p>
            </div>
        `,
  };

  await transporter.sendMail(mailOptions);
};

// G·ª≠i email ƒë·∫∑t m·∫≠t kh·∫©u t√†i kho·∫£n m·ªõi
const sendPasswordCreateAccount = async (email, token, fullName) => {
  const clientUrl = process.env.FE_URL;
  const setPasswordLink = `${clientUrl}/set-password?email=${encodeURIComponent(email)}&token=${encodeURIComponent(token)}`;

  const mailOptions = {
    from: `"H·ªá th·ªëng h·ªó tr·ª£" <${process.env.EMAIL}>`,
    to: email,
    subject: "Ho√†n t·∫•t t√†i kho·∫£n c·ªßa b·∫°n",
    html: `
      <div style="font-family: Arial, sans-serif; background-color: #f5f7fa; padding: 20px;">
        <div style="max-width: 600px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
          <!-- Header -->
          <div style="background-color: #007bff; color: white; text-align: center; padding: 20px;">
            <h2 style="margin: 0;">H·ªá th·ªëng h·ªó tr·ª£ kh√°ch h√†ng</h2>
          </div>

          <!-- Body -->
          <div style="padding: 30px;">
            <p style="font-size: 16px; color: #333;">Ch√†o <strong>${fullName}</strong>,</p>
            <p style="font-size: 15px; color: #555; line-height: 1.6;">
              C·∫£m ∆°n b·∫°n ƒë√£ mua h√†ng t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i.  
              Ch√∫ng t√¥i ƒë√£ t·ª± ƒë·ªông t·∫°o m·ªôt t√†i kho·∫£n cho b·∫°n.
            </p>
            <p style="font-size: 15px; color: #555; line-height: 1.6;">
              Vui l√≤ng nh·∫•n v√†o n√∫t b√™n d∆∞·ªõi ƒë·ªÉ <strong>ƒë·∫∑t m·∫≠t kh·∫©u</strong> v√† truy c·∫≠p t√†i kho·∫£n c·ªßa b·∫°n:
            </p>

            <div style="text-align: center; margin: 30px 0;">
              <a href="${setPasswordLink}"
                 style="background-color: #007bff; color: white; text-decoration: none; padding: 12px 25px; border-radius: 6px; font-size: 16px; display: inline-block;">
                ƒê·∫∑t m·∫≠t kh·∫©u
              </a>
            </div>

            <p style="font-size: 14px; color: #777;">
              N·∫øu b·∫°n kh√¥ng th·ª±c hi·ªán h√†nh ƒë·ªông n√†y, vui l√≤ng b·ªè qua email n√†y.
            </p>
          </div>

          <!-- Footer -->
          <div style="background-color: #f0f0f0; text-align: center; padding: 15px; font-size: 13px; color: #666;">
            ¬© ${new Date().getFullYear()} C·ª≠a h√†ng c·ªßa ch√∫ng t√¥i. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.<br>
            <a href="${clientUrl}" style="color: #007bff; text-decoration: none;">Truy c·∫≠p website</a>
          </div>
        </div>
      </div>
    `,
  };

  await transporter.sendMail(mailOptions);
};

// G·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng ƒë√£ ƒë·∫∑t
const sendOrderConfirmationEmail = async (order, email, fullName) => {
  try {

    // ===== 2. L·∫•y danh s√°ch s·∫£n ph·∫©m trong ƒë∆°n h√†ng =====
    const orderItems = await OrderItem.find({ orderId: order._id }).populate("productVariantId");

    // ===== 3. L·∫•y 1 ·∫£nh ƒë·∫ßu ti√™n cho t·ª´ng s·∫£n ph·∫©m =====
    const itemsWithImages = await Promise.all(
      orderItems.map(async (item) => {
        const image = await VariantImage.findOne({ productVariantId: item.productVariantId });
        return {
          name: item.name,
          price: item.price,
          quantity: item.quantity,
          imageUrl: image ? image.imageUrl : "https://via.placeholder.com/80x80?text=No+Image",
        };
      })
    );

    // ===== 4. T·∫°o b·∫£ng HTML danh s√°ch s·∫£n ph·∫©m =====
    const productRows = itemsWithImages
      .map(
        (item) => `
        <tr>
          <td style="padding: 10px; border-bottom: 1px solid #ddd; text-align: center;">
            <img src="${item.imageUrl}" alt="${item.name}" style="width: 80px; height: 80px; object-fit: cover; border-radius: 8px;" />
          </td>
          <td style="padding: 10px; border-bottom: 1px solid #ddd;">${item.name}</td>
          <td style="padding: 10px; border-bottom: 1px solid #ddd; text-align: center;">${item.quantity}</td>
          <td style="padding: 10px; border-bottom: 1px solid #ddd; text-align: right;">${item.price.toLocaleString()}‚Ç´</td>
        </tr>
      `
      )
      .join("");

    // ===== 5. Format l·∫°i n·ªôi dung email =====
    const mailOptions = {
      from: `"C·ª≠a h√†ng c·ªßa ch√∫ng t√¥i" <${process.env.EMAIL}>`,
      to: email,
      subject: `X√°c nh·∫≠n ƒë∆°n h√†ng #${order.orderCode}`,
      html: `
        <div style="font-family: Arial, sans-serif; background-color: #f5f7fa; padding: 20px;">
          <div style="max-width: 700px; margin: 0 auto; background: white; border-radius: 10px; overflow: hidden; box-shadow: 0 2px 10px rgba(0,0,0,0.1);">
            <div style="background-color: #007bff; color: white; text-align: center; padding: 20px;">
              <h2 style="margin: 0;">X√°c nh·∫≠n ƒë∆°n h√†ng</h2>
            </div>

            <div style="padding: 30px;">
              <p>Ch√†o <strong>${fullName}</strong>,</p>
              <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒë·∫∑t h√†ng t·∫°i c·ª≠a h√†ng c·ªßa ch√∫ng t√¥i!</p>
              <p>M√£ ƒë∆°n h√†ng c·ªßa b·∫°n l√†: <strong>${order.orderCode}</strong></p>

              <h3 style="margin-top: 30px;">üßæ Th√¥ng tin ƒë∆°n h√†ng</h3>
              <p><strong>Ng√†y ƒë·∫∑t:</strong> ${new Date(order.purchaseTime).toLocaleString("vi-VN")}</p>
              <p><strong>ƒê·ªãa ch·ªâ giao h√†ng:</strong> ${order.addressDetail}, ${order.ward}, ${order.district}, ${order.province}</p>
              <p><strong>Ph∆∞∆°ng th·ª©c thanh to√°n:</strong> ${order.paymentMethod}</p>
              <p><strong>Tr·∫°ng th√°i thanh to√°n:</strong> ${order.paymentStatus}</p>
              <p><strong>Ph√≠ v·∫≠n chuy·ªÉn:</strong> ${order.shippingFee.toLocaleString()}‚Ç´</p>
              <p><strong>T·ªïng ti·ªÅn:</strong> <span style="color: #007bff; font-weight: bold;">${order.totalPrice.toLocaleString()}‚Ç´</span></p>

              <h3 style="margin-top: 30px;">üõçÔ∏è S·∫£n ph·∫©m ƒë·∫∑t mua</h3>
              <table style="width: 100%; border-collapse: collapse; margin-top: 10px;">
                <thead>
                  <tr style="background-color: #f0f0f0;">
                    <th style="padding: 10px;">·∫¢nh</th>
                    <th style="padding: 10px;">T√™n s·∫£n ph·∫©m</th>
                    <th style="padding: 10px;">S·ªë l∆∞·ª£ng</th>
                    <th style="padding: 10px;">Gi√°</th>
                  </tr>
                </thead>
                <tbody>
                  ${productRows}
                </tbody>
              </table>

              <p style="margin-top: 30px; color: #555;">
                B·∫°n c√≥ th·ªÉ ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng c·ªßa m√¨nh trong ph·∫ßn "ƒê∆°n h√†ng c·ªßa t√¥i" tr√™n website.
              </p>
            </div>

            <div style="background-color: #f0f0f0; text-align: center; padding: 15px; font-size: 13px; color: #666;">
              ¬© ${new Date().getFullYear()} C·ª≠a h√†ng c·ªßa ch√∫ng t√¥i. M·ªçi quy·ªÅn ƒë∆∞·ª£c b·∫£o l∆∞u.
            </div>
          </div>
        </div>
      `,
    };

    // ===== 6. G·ª≠i email =====
    await transporter.sendMail(mailOptions);
    console.log(`ƒê√£ g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng #${order.orderCode} ƒë·∫øn ${order.userId.email}`);
  } catch (error) {
    console.error("L·ªói g·ª≠i email x√°c nh·∫≠n ƒë∆°n h√†ng:", error.message);
  }
};


module.exports = {
  sendCreateAccount,
  sendRecoveryPassword,
  sendPasswordCreateAccount,
  sendOrderConfirmationEmail,
};
